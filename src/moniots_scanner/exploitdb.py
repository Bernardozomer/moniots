import subprocess
import json

from . import util
from .models import AlertSource, Device, ExploitDBAlert, Severity
from .nvd import get_cve_severity


def batch_query_exploitdb(devices: list[Device]) -> dict[Device, list[ExploitDBAlert]]:
    """Run find_exploits_for_device in parallel over all devices."""
    return util.batch_test(
        devices,
        "Querying ExploitDB",
        query_exploitdb,
    )


def query_exploitdb(device: Device) -> list[ExploitDBAlert]:
    """For each open port/service on `device`, call searchsploit and
    collect any matching exploits.
    """
    alerts = []

    for port in device.open_ports:
        if not port.product:
            # Skip if there is no product string.
            continue

        q = f"{port.product} {port.version}".strip()
        results = _run_searchsploit(q)

        for r in results:
            cve_ids = [c for c in r["Codes"].split(";") if c.startswith("CVE-")]

            if cve_ids:
                severity = max(get_cve_severity(cve_id) for cve_id in cve_ids)
            else:
                # TODO: Handle cases without CVEs.
                severity = Severity.MEDIUM

            alerts.append(
                ExploitDBAlert(
                    source=AlertSource.EXPLOITDB,
                    severity=severity,
                    title=r["Title"],
                    description=None,
                    cwe_ids=[],
                    cve_ids=[c for c in r["Codes"].split(";") if c.startswith("CVE-")],
                    remediation=None,
                    edb_id=r.get("EDB-ID", ""),
                    verified=True if r["Verified"] == 1 else False,
                    port=port.port,
                    type=r["Type"],
                    platform=r["Platform"],
                    author=r["Author"],
                    date=r["Date_Published"],
                    edb_source=r["Source"],
                )
            )

    return alerts


def _run_searchsploit(query: str) -> list[dict]:
    """Run `searchsploit -j <query>` and return the parsed JSON dict.
    If searchsploit isn't installed or fails, returns [].
    """
    try:
        proc = subprocess.run(
            ["searchsploit", "-j", query], capture_output=True, text=True, check=True
        )
        data = json.loads(proc.stdout)
        return data.get("RESULTS_EXPLOIT", [])
    except Exception:
        return []
