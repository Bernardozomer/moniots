<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üïµÔ∏è Moniots IoT Cybersecurity Report</title>

    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@400;600&family=IBM+Plex+Mono&display=swap" rel="stylesheet">

    <style>
        :root {
            /** Base colors */
            --clr-dark-a0: #000000;
            --clr-light-a0: #ffffff;

            /** Theme primary colors */
            --clr-primary-a0: #bf7f43;
            --clr-primary-a10: #c88d57;
            --clr-primary-a20: #d09a6b;
            --clr-primary-a30: #d8a87f;
            --clr-primary-a40: #e0b694;
            --clr-primary-a50: #e7c5a9;

            /** Theme surface colors */
            --clr-surface-a0: #212020;
            --clr-surface-a10: #363535;
            --clr-surface-a20: #4c4b4b;
            --clr-surface-a30: #636262;
            --clr-surface-a40: #7b7a7a;
            --clr-surface-a50: #949393;

            /** Theme tonal surface colors */
            --clr-surface-tonal-a0: #2f2924;
            --clr-surface-tonal-a10: #433d38;
            --clr-surface-tonal-a20: #58534e;
            --clr-surface-tonal-a30: #6e6965;
            --clr-surface-tonal-a40: #84807d;
            --clr-surface-tonal-a50: #9c9895;

            /** Accent blue colors */
            --clr-accent-blue-a0: #5F86A9;
            --clr-accent-blue-a10: #7193B2;
            --clr-accent-blue-a20: #82A1BC;
            --clr-accent-blue-a30: #94AEC5;
            --clr-accent-blue-a40: #A5BBCF;
            --clr-accent-blue-a50: #B7C9D8;

            /** Accent green colors */
            --clr-accent-green-a0: #708D5F;
            --clr-accent-green-a10: #809A71;
            --clr-accent-green-a20: #8FA682;
            --clr-accent-green-a30: #9FB394;
            --clr-accent-green-a40: #AFBFA5;
            --clr-accent-green-a50: #BFCCB7;

            /** Accent purple colors */
            --clr-accent-purple-a0: #8A6B91;
            --clr-accent-purple-a10: #977B9D;
            --clr-accent-purple-a20: #A48CA9;
            --clr-accent-purple-a30: #B19CB5;
            --clr-accent-purple-a40: #BDACC1;
            --clr-accent-purple-a50: #CABCCE;

            /** Accent ochre/gold colors */
            --clr-accent-ochre-a0: #C4B273;
            --clr-accent-ochre-a10: #CABA82;
            --clr-accent-ochre-a20: #D1C392;
            --clr-accent-ochre-a30: #D7CBA1;
            --clr-accent-ochre-a40: #DED4B1;
            --clr-accent-ochre-a50: #E4DCC0;

            /** Accent red/terracotta colors */
            --clr-accent-red-a0: #A86858;
            --clr-accent-red-a10: #B2796A;
            --clr-accent-red-a20: #BB897D;
            --clr-accent-red-a30: #C59A8F;
            --clr-accent-red-a40: #CEAAA1;
            --clr-accent-red-a50: #D8BBB4;

            /** Accent teal colors */
            --clr-accent-teal-a0: #5B8C81;
            --clr-accent-teal-a10: #6D998F;
            --clr-accent-teal-a20: #7FA59D;
            --clr-accent-teal-a30: #91B2AB;
            --clr-accent-teal-a40: #A3BFB8;
            --clr-accent-teal-a50: #B5CBC6;
        }

        html,
        body {
            margin: 0;
            padding: 0;
            font-family: 'IBM Plex Sans', sans-serif;
            background: var(--clr-surface-a0);
            color: var(--clr-light-a0);
        }

        body {
            max-width: 960px;
            margin: 2rem auto;
            padding: 0 1rem;
            line-height: 1.6; 
        }

        h1 {
            font-size: 2rem;
            font-weight: 600;
            color: var(--clr-primary-a0);
            margin-bottom: 0.5rem;
        }

        .subtitle {
            color: var(--clr-primary-a40);
            margin-bottom: 2rem;
            font-size: 0.9rem;
        }

        a {
            color: var(--clr-accent-blue-a30);
            text-decoration: none;
        }
        a:hover,
        a:focus {
            color: var(--clr-accent-blue-a40);
            text-decoration: underline;
        }

        table.summary {
            width: 100%;
            border-collapse: separate; 
            border-spacing: 0;
            margin-bottom: 2.5rem;
            border-radius: 8px;
            overflow: hidden; 
            border: 1px solid var(--clr-surface-tonal-a20);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        table.summary th,
        table.summary td {
            padding: 0.75rem 1rem;
            text-align: left;
            border-bottom: 1px solid var(--clr-surface-tonal-a20);
        }
        table.summary th {
            background: var(--clr-primary-a0);
            color: var(--clr-light-a0);
            font-weight: 600;
        }
        table.summary td:first-child,
        table.summary th:first-child {
            padding-left: 1.5rem;
        }
        table.summary td:last-child,
        table.summary th:last-child {
            padding-right: 1.5rem;
        }
        table.summary tr:nth-child(even) {
            background-color: var(--clr-surface-tonal-a0); 
        }
        table.summary tr:last-child td {
            border-bottom: 0; 
        }
        table.summary tr {
            transition: background-color 0.18s, color 0.18s;
        }
        table.summary tr:hover {
            background: var(--clr-surface-tonal-a10) !important; 
            cursor: pointer;
        }
        table.summary th:first-child { border-top-left-radius: 7px; } 
        table.summary th:last-child { border-top-right-radius: 7px; }
        table.summary tr:last-child td:first-child { border-bottom-left-radius: 7px; }
        table.summary tr:last-child td:last-child { border-bottom-right-radius: 7px; }

        .detail {
            display: none; 
            background: var(--clr-surface-a10);
            border: 1px solid var(--clr-surface-tonal-a20);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 2.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        .detail.active {
            display: block; 
        }
        .detail h2 {
            margin-top: 0;
            color: var(--clr-accent-teal-a20);
        }
        .detail p {
            margin: 0.6rem 0;
        }

        .section-title {
            margin-top: 1.5rem;
            margin-bottom: 0.5rem;
            padding-bottom: 0.5rem;
            font-weight: 600;
            font-size: 1.1rem;
            border-bottom: 2px solid var(--clr-surface-tonal-a50);
            color: var(--clr-accent-teal-a40);
            display: flex; 
            justify-content: space-between; 
            align-items: center;
            cursor: pointer; 
            user-select: none; 
        }
        .section-title-main { 
            display: flex;
            align-items: center;
        }
        .section-title .section-arrow {
            width: 0;
            height: 0;
            border-top: 6px solid transparent;
            border-bottom: 6px solid transparent;
            border-left: 6px solid var(--clr-light-a0); 
            margin-right: 1rem;
            transition: transform 0.3s ease, border-left-color 0.3s ease;
        }
        .section-title.open .section-arrow {
            transform: rotate(90deg); 
            border-left-color: var(--clr-accent-teal-a20); 
        }
        .section-title .badge-count {
            background-color: var(--clr-accent-purple-a0);
            color: var(--clr-light-a0);
        }
        
        /* FIX 1: CSS handles display of section-content based on .open class on title */
        .section-content { 
            display: none; /* Default hidden */
        }
        .section-title.open + .section-content { /* Show when title is open */
            display: block;
        }


        table.inner {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin-top: 1rem;
            border-radius: 6px;
            overflow: hidden;
            border: 1px solid var(--clr-surface-tonal-a20);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);
        }
        table.inner th,
        table.inner td {
            padding: 0.6rem 0.8rem;
            border-bottom: 1px solid var(--clr-surface-tonal-a20);
            vertical-align: top;
        }
        table.inner th {
            background: var(--clr-accent-teal-a0); 
            color: var(--clr-light-a0);
            font-weight: 600;
        }
        table.inner tr:nth-child(even) {
            background-color: var(--clr-surface-tonal-a10); 
        }
        table.inner th:first-child { border-top-left-radius: 5px; } 
        table.inner th:last-child { border-top-right-radius: 5px; }
        table.inner tr:last-child td:first-child { border-bottom-left-radius: 5px; }
        table.inner tr:last-child td:last-child { border-bottom-right-radius: 5px; }
        table.inner tr:last-child td {
            border-bottom: 0;
        }

        .alerts-toolbar {
            display: flex;
            flex-wrap: wrap; 
            justify-content: space-between;
            align-items: center;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
            gap: 1rem; 
        }
        .tabs {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap; 
        }
        .tabs button {
            background: var(--clr-surface-a20);
            color: var(--clr-light-a0);
            border: 1px solid var(--clr-surface-tonal-a20);
            padding: 0.5rem 1rem;
            border-radius: 12px; 
            cursor: pointer;
            position: relative; 
            transition: background-color 0.2s, color 0.2s, border-color 0.2s, box-shadow 0.3s, transform 0.15s;
        }
        .tabs button:hover {
            background: var(--clr-surface-a30); 
            box-shadow: 0 4px 16px rgba(0,0,0,0.18), 0 0 0 2px var(--clr-light-a0); 
        }
        .tabs button .badge {
            margin-left: 0.4rem;
            font-size: 0.75em;
            transition: background-color 0.2s, color 0.2s; 
        }

        .alerts-search input {
            background: var(--clr-surface-a0);
            border: 1px solid var(--clr-surface-tonal-a30);
            color: var(--clr-light-a0);
            padding: 0.5rem 1rem;
            border-radius: 6px;
            transition: border-color 0.2s, box-shadow 0.3s;
            font-family: 'IBM Plex Mono', monospace;
        }
        .alerts-search input:focus,
        .alerts-search input:hover {
            border-color: var(--clr-primary-a0); 
            outline: none; 
            box-shadow: 0 0 0 2px var(--clr-primary-a50); 
        }

        .accordion-item {
            border-bottom: 1px solid var(--clr-surface-tonal-a20);
        }
        .accordion-item.is-last-visible-alert {
            border-bottom: none;
        }

        .accordion-header {
            padding: 0.8rem 1rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            cursor: pointer;
            user-select: none;
            transition: background-color 0.2s ease;
        }
        .accordion-header:hover {
            background: var(--clr-surface-tonal-a10);
        }
        .accordion-header .arrow { 
            width: 0;
            height: 0;
            border-top: 6px solid transparent;
            border-bottom: 6px solid transparent;
            border-left: 6px solid var(--clr-light-a0);
            margin-right: 1rem;
            transition: transform 0.3s ease, border-left-color 0.3s ease;
        }
        .accordion-header.open .arrow {
            transform: rotate(90deg);
            border-left-color: var(--clr-primary-a20); 
        }
        
        .accordion-content {
            display: none; 
            padding: 0.8rem 1.8rem 1.2rem;
            background-color: var(--clr-surface-tonal-a0); 
        }
        .accordion-header.open + .accordion-content {
            display: block;
        }

        .accordion-content p {
            margin: 0.5rem 0;
            line-height: 1.7;
        }
        .accordion-content strong {
            color: var(--clr-primary-a50); 
        }

        .alert-header {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 0.5em;
            font-weight: 600;
            flex-grow: 1; 
        }
        .alert-header .badge {
            font-weight: normal; 
        }

        .badge {
            display: inline-block;
            padding: 0.25em 0.6em;
            border-radius: 12px;
            font-size: 0.75em;
            vertical-align: middle;
            line-height: 1.2;
            text-transform: capitalize; 
        }

        .badge-critical { background-color: var(--clr-accent-red-a0); color: var(--clr-light-a0); }
        .badge-high { background-color: var(--clr-primary-a0); color: var(--clr-light-a0); }
        .badge-medium { background-color: var(--clr-accent-ochre-a0); color: var(--clr-dark-a0); } 
        .badge-low { background-color: var(--clr-accent-blue-a0); color: var(--clr-light-a0); }
        .badge-informational { background-color: var(--clr-accent-teal-a0); color: var(--clr-light-a0); }
        .badge-all { background-color: var(--clr-surface-a30); color: var(--clr-light-a0); } 

        .badge-context {
            background-color: var(--clr-accent-green-a0);
            color: var(--clr-light-a0);
            text-transform: none; 
        }
        .badge-source {
            background-color: var(--clr-accent-purple-a20);
            color: var(--clr-dark-a0); 
            text-transform: uppercase; 
        }

        .no-data {
            font-style: italic;
            color: var(--clr-surface-a50);
            padding: 1rem 0;
        }
    </style>
</head>
<body>
    <h1>üïµÔ∏è Moniots IoT Cybersecurity Report</h1>
    <div class="subtitle">{{ results|length }} devices on {{ network }} at {{ now }}</div>

    {# SUMMARY TABLE OF DEVICES #}
    <table class="summary">
        <thead>
            <tr><th>IP</th><th>Hostname</th><th>Open Ports</th><th>Alerts</th></tr>
        </thead>
        <tbody>
            {% for entry in results %}
            {% set d = entry.device %}
            <tr data-ip="{{ d.ip }}" onclick="showDetail('{{ d.ip }}')">
                <td>{{ d.ip }}</td>
                <td>{{ d.hostname or '‚Äî' }}</td>
                <td>{{ d.open_ports|length }}</td>
                <td>
                    <span class="badge
                        {% if (entry.alerts|selectattr('severity.label','equalto','Critical')|list|length) > 0 %}badge-critical
                        {% elif (entry.alerts|selectattr('severity.label','equalto','High')|list|length) > 0 %}badge-high
                        {% elif (entry.alerts|selectattr('severity.label','equalto','Medium')|list|length) > 0 %}badge-medium
                        {% elif (entry.alerts|selectattr('severity.label','equalto','Low')|list|length) > 0 %}badge-low
                        {% elif entry.alerts|length > 0 %}badge-informational
                        {% else %}badge-context{% endif %}">
                        {{ entry.alerts|length }}
                    </span>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    {# DETAIL PANELS FOR EACH DEVICE (Initially hidden) #}
    {% for entry in results %}
    {% set d = entry.device %}
    <div id="detail-{{ d.ip }}" class="detail">
        <h2>
            {{ d.ip }}
            {% if d.hostname %}
            ({{ d.hostname }})
            {% endif %}
        </h2>
        <div style="display: flex; gap: 2rem; align-items: center; margin-bottom: 1rem; flex-wrap: wrap;">
            <div><strong>Status:</strong> {{ d.status }}</div>
            <div><strong>Uptime:</strong> {{ d.uptime_seconds | default('Unknown', true) }} s</div>
            <div><strong>Last Boot:</strong> {{ d.last_boot | default('Unknown', true) }}</div>
        </div>

        {# OS Matches Section - Collapsible #}
        <div class="section-title" onclick="toggleSectionContent('os-content-{{ d.ip }}', this)">
            <div class="section-title-main">
                <div class="section-arrow"></div> OS Matches
            </div>
            <span class="badge badge-count">{{ d.os_matches|length }}</span>
        </div>
        <div id="os-content-{{ d.ip }}" class="section-content"> {# Removed style="display: none;" here, CSS handles it #}
            {% if d.os_matches %}
            <table class="inner">
                <thead>
                    <tr>
                        <th>OS Name</th>
                        <th>Accuracy</th>
                        <th>Class</th>
                    </tr>
                </thead>
                <tbody>
                    {% for os in d.os_matches %}
                    <tr>
                        <td><strong>{{ os.name }}</strong></td>
                        <td>{{ os.accuracy }}%</td>
                        <td>
                            {% for cls in os.osclasses %}
                                <span class="badge badge-informational"">
                                    {{ cls.type }}/{{ cls.vendor }} {{ cls.osfamily }} {{ cls.osgen or '' }}
                                </span>
                            {% endfor %}
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
            {% else %}
            <p class="no-data">No OS match.</p>
            {% endif %}
        </div>

        {# Open Ports Section - Collapsible #}
        <div class="section-title" onclick="toggleSectionContent('ports-content-{{ d.ip }}', this)">
            <div class="section-title-main">
                <div class="section-arrow"></div> Open Ports
            </div>
            <span class="badge badge-count">{{ d.open_ports|length }}</span>
        </div>
        <div id="ports-content-{{ d.ip }}" class="section-content"> {# Removed style="display: none;" here, CSS handles it #}
            {% if d.open_ports %}
            <table class="inner">
                <thead><tr><th>Port</th><th>State</th><th>Service</th><th>Product</th><th>Version</th><th>CPE</th></tr></thead>
                <tbody>
                    {% for p in d.open_ports %}
                    <tr>
                        <td>{{ p.port }}</td>
                        <td>{{ p.state }}</td>
                        <td>{{ p.service }}</td>
                        <td>{{ p.product or '‚Äî' }}</td>
                        <td>{{ p.version or '‚Äî' }}</td>
                        <td>{{ p.cpe or '‚Äî' }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
            {% else %}
            <p class="no-data">No open ports.</p>
            {% endif %}
        </div>

        {# Alerts Section - Collapsible #}
        <div class="section-title" onclick="toggleSectionContent('alerts-panel-{{ d.ip }}', this)">
            <div class="section-title-main">
                <div class="section-arrow"></div> Alerts
            </div>
            <span class="badge badge-count">{{ entry.alerts|length }}</span>
        </div>
        <div id="alerts-panel-{{ d.ip }}" class="section-content"> {# Removed style="display: none;" here, CSS handles it #}
            <div class="alerts-toolbar">
                <div class="tabs" id="tabs-{{ d.ip }}">
                    {% set sev_counts = {'All': entry.alerts|length} %}
                    {% for alert_item in entry.alerts %}
                        {% set sev_label = alert_item.severity.label %}
                        {% set sev_counts_sev_label = sev_counts[sev_label] | default(0) %}
                        {% set _ = sev_counts.update({sev_label: sev_counts_sev_label + 1}) %}
                    {% endfor %}

                    {% for sev in ['All', 'Critical', 'High', 'Medium', 'Low', 'Informational'] %}
                        {% if sev_counts[sev] is defined and (sev_counts[sev] > 0 or sev == 'All') %}
                        <button data-sev="{{ sev }}">
                            {{ sev }}
                            <span class="badge badge-{{ sev|lower }}">{{ sev_counts[sev] }}</span>
                        </button>
                        {% endif %}
                    {% endfor %}
                </div>
                <div class="alerts-search">
                    <input type="text" placeholder="Search alerts‚Ä¶" oninput="filterAlerts('{{ d.ip }}', this.value)">
                </div>
            </div>

            <div class="alerts-list" id="alerts-list-{{ d.ip }}">
                {% if entry.alerts %}
                    {% for a in entry.alerts | sort(attribute='severity.min_cvss', reverse=True) %}
                    <div class="accordion-item" data-severity="{{ a.severity.label }}">
                        <div class="accordion-header" onclick="toggleAccordion(this)">
                            <div class="alert-header" style="justify-content: space-between;">
                                <div style="display: flex; align-items: center;">
                                    <div class="arrow"></div>
                                    <div>{{ a.title }}</div>
                                </div>
                                <div style="display: flex; gap: 0.4em; flex-direction: row-reverse;">
                                    {% if a.cve_ids %}
                                        {% for cv in a.cve_ids %}
                                        <span class="badge badge-context">{{ cv }}</span>
                                        {% endfor %}
                                    {% endif %}
                                    {% if a.cwe_ids %}
                                        {% for cw in a.cwe_ids %}
                                        <span class="badge badge-context">CWE-{{ cw }}</span>
                                        {% endfor %}
                                    {% endif %}
                                    <span class="badge badge-{{ a.severity.label|lower }}">{{ a.severity.label }}</span>
                                    <span class="badge badge-source">{{ a.source.value }}</span>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-content"> {# Initially hidden by CSS via .accordion-header:not(.open) + .accordion-content #}
                            {% if a.description %}
                                <p>{{ a.description | replace('\n', '<br>') | safe }}</p>
                            {% endif %}

                            {# Specific details based on alert source type #}
                            {% if a.source == AlertSource.CREDS %}
                                <p><strong>Service:</strong> {{ a.service }}</p>
                                <p><strong>Username:</strong> {{ a.username }}</p>
                                <p><strong>Password:</strong> {{ a.password }}</p>
                            {% elif a.source == AlertSource.INSECURE_SRV %}
                                {% elif a.source == AlertSource.CERTIFICATE %}
                                <p><strong>Issuer:</strong> {{ a.issuer }}</p>
                                <p><strong>Subject:</strong> {{ a.subject }}</p>
                                <p><strong>Valid From:</strong> {{ a.valid_from }}</p>
                                <p><strong>Valid To:</strong> {{ a.valid_to }}</p>
                            {% elif a.source == AlertSource.VULNERABILITY %}
                                <p><strong>CVE ID:</strong> {{ a.cve_id }}</p>
                                <p><strong>Description:</strong> {{ a.description | replace('\n', '<br>') | safe }}</p>
                                {% if a.cvss_score %}<p><strong>CVSS Score:</strong> {{ a.cvss_score }}</p>{% endif %}
                            {% elif a.source == AlertSource.EXPLOITDB %}
                                <p><strong>ExploitDB ID:</strong> {{ a.edb_id }}</p>
                                <p><strong>Verified:</strong> {{ 'Yes' if a.verified else 'No' }}</p>
                                {% if a.port %}<p><strong>Port:</strong> {{ a.port }}</p>{% endif %}
                                <p><strong>Type:</strong> {{ a.type }}</p>
                                <p><strong>Platform:</strong> {{ a.platform }}</p>
                                {% if a.author %}<p><strong>Author:</strong> {{ a.author }}</p>{% endif %}
                                {% if a.date %}<p><strong>Date:</strong> {{ a.date }}</p>{% endif %}
                                {% if a.edb_source %}<p><strong>Source Link:</strong> <a href="{{ a.edb_source }}" target="_blank" rel="noopener noreferrer">{{ a.edb_source }}</a></p>{% endif %}
                            {% elif a.source == AlertSource.ZAP %}
                                <p><strong>URL:</strong> <a href="{{ a.url }}" target="_blank" rel="noopener noreferrer">{{ a.url }}</a></p>
                                {% if a.method %}<p><strong>Method:</strong> {{ a.method }}</p>{% endif %}
                                {% if a.parameter %}<p><strong>Parameter:</strong> {{ a.parameter }}</p>{% endif %}
                                {% if a.evidence %}<p><strong>Evidence:</strong><br><pre><code>{{ a.evidence | e }}</code></pre></p>{% endif %}
                                {% if a.confidence %}<p><strong>Confidence:</strong> {{ a.confidence.value }}</p>{% endif %}
                            {% elif a.source == AlertSource.NVD %}
                                {% if a.nvd_source %}<p><strong>NVD Source:</strong> {{ a.nvd_source }}</p>{% endif %}
                                {% if a.date %}<p><strong>Date:</strong> {{ a.date }}</p>{% endif %}
                                <p><strong>URL:</strong> <a href="{{ a.url }}" target="_blank" rel="noopener noreferrer">{{ a.url }}</a></p>
                            {% endif %}

                            {% if a.remediation %}
                                <p><strong>Remediation:</strong><br>{{ a.remediation | replace('\n', '<br>') | safe }}</p>
                            {% endif %}
                        </div>
                    </div>
                    {% endfor %}
                {% else %}
                    <p class="no-data">No alerts for this device.</p>
                {% endif %}
            </div>
        </div>
    </div>
    {% endfor %}

    <script>
        /**
         * Shows the detail panel for a given IP and hides others.
         * Also initializes the state of collapsible sections and alert filters for the shown panel.
         */
        function showDetail(ip) {
            document.querySelectorAll('.detail').forEach(d => d.classList.remove('active'));
            const targetDetail = document.getElementById('detail-' + ip);

            if (targetDetail) {
                targetDetail.classList.add('active');
                const offsetTop = targetDetail.offsetTop - 20; 
                window.scrollTo({ top: offsetTop, behavior: 'smooth' });

                setSectionState('os-content-' + ip, true);
                setSectionState('ports-content-' + ip, true);
                setSectionState('alerts-panel-' + ip, true); 

                const firstTab = targetDetail.querySelector(`#tabs-${ip} button`);
                if (firstTab) {
                    setActiveTab(firstTab);
                    filterAlerts(ip, targetDetail.querySelector('.alerts-search input').value); // Use current search text
                }
            }
        }

        /**
         * Toggles the display of an accordion content area by toggling the 'open' class on its header.
         * CSS handles the actual display.
         */
        function toggleAccordion(header) {
            if (header) {
                header.classList.toggle('open');
            }
        }
        
        /**
         * Toggles the visibility of a generic section's content by toggling .open class on title.
         * CSS handles the actual display.
         */
        function toggleSectionContent(sectionContentId, sectionTitleElement) { // sectionContentId not used if only toggling class on title
            if (sectionTitleElement) {
                sectionTitleElement.classList.toggle('open');
            }
        }

        /**
         * Sets the initial display state of a section by adding/removing .open class on its title.
         * CSS handles the actual display.
         */
        function setSectionState(sectionContentId, shouldBeOpen) {
            const sectionContent = document.getElementById(sectionContentId);
            if (sectionContent) {
                const sectionTitle = sectionContent.previousElementSibling; 
                if (sectionTitle) {
                    if (shouldBeOpen) {
                        sectionTitle.classList.add('open');
                    } else {
                        sectionTitle.classList.remove('open');
                    }
                }
            }
        }
        
        const severityColors = {
            "critical": "var(--clr-accent-red-a0)", "high": "var(--clr-primary-a0)",
            "medium": "var(--clr-accent-ochre-a0)", "low": "var(--clr-accent-blue-a0)",
            "informational": "var(--clr-accent-teal-a0)", "all": "var(--clr-surface-a30)"
        };
        const severityTextColors = {
            "critical": "var(--clr-light-a0)", "high": "var(--clr-light-a0)",
            "medium": "var(--clr-dark-a0)", "low": "var(--clr-light-a0)",
            "informational": "var(--clr-light-a0)", "all": "var(--clr-light-a0)"
        };

        function setActiveTab(btn) {
            const tabsContainer = btn.closest('.tabs');
            tabsContainer.querySelectorAll('button').forEach(b => {
                b.classList.remove('active');
                b.style.backgroundColor = 'var(--clr-surface-a20)';
                b.style.color = 'var(--clr-light-a0)';
                b.style.borderColor = 'var(--clr-surface-tonal-a20)';
            });
            btn.classList.add('active');
            const severity = btn.dataset.sev.toLowerCase();
            btn.style.backgroundColor = severityColors[severity] || 'var(--clr-primary-a0)';
            btn.style.color = severityTextColors[severity] || 'var(--clr-light-a0)';
            btn.style.borderColor = severityColors[severity] || 'var(--clr-primary-a0)';
        }

        document.querySelectorAll('[id^="tabs-"] button').forEach(btn => {
            btn.addEventListener('click', () => {
                const toolbar = btn.closest('.alerts-toolbar');
                const ip = toolbar.closest('.detail').id.replace('detail-', '');
                const searchInput = toolbar.querySelector('.alerts-search input');
                const searchText = searchInput ? searchInput.value.trim().toLowerCase() : '';
                setActiveTab(btn);
                filterAlerts(ip, searchText); 
            });
        });

        function filterAlerts(ip, text) {
            const listContainer = document.getElementById('alerts-list-' + ip);
            if (!listContainer) return;

            const lc = text.toLowerCase();
            const tabsContainer = document.getElementById('tabs-' + ip);
            
            let activeTabSeverity = 'All'; // Default
            const activeTabButton = tabsContainer ? tabsContainer.querySelector('button.active') : null;
            if (activeTabButton) {
                activeTabSeverity = activeTabButton.dataset.sev;
            } else if (tabsContainer) { // If no active button, make "All" tab active
                const allButton = tabsContainer.querySelector('button[data-sev="All"]');
                if (allButton) setActiveTab(allButton);
            }


            let visibleCount = 0;
            const allAlertItems = listContainer.querySelectorAll('.accordion-item');

            allAlertItems.forEach(item => {
                const itemSeverity = item.dataset.severity;
                const severityMatch = activeTabSeverity === 'All' || itemSeverity === activeTabSeverity;
                const textMatch = item.innerText.toLowerCase().includes(lc);

                if (severityMatch && textMatch) {
                    item.style.display = ''; // Show item
                    visibleCount++;
                } else {
                    item.style.display = 'none'; // Hide item
                }
            });
            
            allAlertItems.forEach(item => item.classList.remove('is-last-visible-alert'));
            const visibleItems = Array.from(allAlertItems).filter(item => item.style.display !== 'none');
            if (visibleItems.length > 0) {
                visibleItems[visibleItems.length - 1].classList.add('is-last-visible-alert');
            }


            let noResultsMessage = listContainer.querySelector('.no-data-filter');
            if (!noResultsMessage && allAlertItems.length > 0) {
                noResultsMessage = document.createElement('p');
                noResultsMessage.className = 'no-data no-data-filter';
                listContainer.appendChild(noResultsMessage);
            }

            if (noResultsMessage) {
                if (visibleCount === 0 && allAlertItems.length > 0) {
                    noResultsMessage.textContent = 'No alerts match your current filter.';
                    noResultsMessage.style.display = 'block';
                } else {
                    noResultsMessage.style.display = 'none';
                }
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.detail.active').forEach(activeDetailPanel => {
                const ip = activeDetailPanel.id.replace('detail-', '');
                showDetail(ip); 
            });

            document.querySelectorAll('.detail:not(.active)').forEach(detailPanel => {
                 const ip = detailPanel.id.replace('detail-', '');
                 setSectionState('os-content-' + ip, false);
                 setSectionState('ports-content-' + ip, false);
                 setSectionState('alerts-panel-' + ip, false);
            });
        });
    </script>
</body>
</html>