<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>üïµÔ∏è Moniots IoT Cybersecurity Report</title>

  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@400;600&family=IBM+Plex+Mono&display=swap" rel="stylesheet">

  <style>
    :root {
      /** Base colors */
      --clr-dark-a0: #000000;
      --clr-light-a0: #ffffff;

      /** Theme primary colors */
      --clr-primary-a0: #bf7f43;
      --clr-primary-a10: #c88d57;
      --clr-primary-a20: #d09a6b;
      --clr-primary-a30: #d8a87f;
      --clr-primary-a40: #e0b694;
      --clr-primary-a50: #e7c5a9;

      /** Theme surface colors */
      --clr-surface-a0: #212020;
      --clr-surface-a10: #363535;
      --clr-surface-a20: #4c4b4b;
      --clr-surface-a30: #636262;
      --clr-surface-a40: #7b7a7a;
      --clr-surface-a50: #949393;

      /** Theme tonal surface colors */
      --clr-surface-tonal-a0: #2f2924;
      --clr-surface-tonal-a10: #433d38;
      --clr-surface-tonal-a20: #58534e;
      --clr-surface-tonal-a30: #6e6965;
      --clr-surface-tonal-a40: #84807d;
      --clr-surface-tonal-a50: #9c9895;
    }

    html, body {
      margin:0; padding:0;
      font-family: 'IBM Plex Sans', sans-serif;
      background: var(--clr-surface-a0);
      color: var(--clr-light-a0);
    }

    body {
      max-width: 960px; 
      margin: 2rem auto; 
      padding: 0 1rem;
      line-height: 1.5;
    }

    h1 { 
      font-size: 2rem; 
      font-weight: 600; 
      color: var(--clr-primary-a0); 
      margin-bottom: 0.5rem; 
    }
    .subtitle { 
      color: var(--clr-surface-tonal-a10); 
      margin-bottom: 2rem; 
      font-size: 0.9rem; 
    }

    /* summary table */
    table.summary { width:100%; border-collapse:collapse; margin-bottom:2rem; }
    table.summary th, table.summary td {
      padding:0.75rem 1rem; text-align:left; border-bottom:1px solid var(--clr-surface-tonal-a20);
    }
    table.summary th { background:var(--clr-primary-a0); color:var(--clr-light-a0); font-weight:600; }
    table.summary tr:hover { background:var(--clr-primary-a10); cursor:pointer; }
    a.row-link { color:inherit; text-decoration:none; display:block; width:100%; }

    /* detail panel */
    .detail { display:none; background:var(--clr-surface-a10); border:1px solid var(--clr-surface-tonal-a20);
              border-radius:8px; padding:1.5rem; margin-bottom:2rem; }
    .detail.active { display:block; }
    .detail h2 { font-family:'IBM Plex Mono', monospace; margin-top:0; }
    .detail p { margin:0.5rem 0; }

    /* section headers */
    .section-title {
      margin-top: 1.5rem;
      margin-bottom: 0.5rem;
      font-weight: 600;
      border-bottom: 2px solid var(--clr-surface-tonal-a20);
      color: var(--clr-surface-a50);
    }

    /* inner tables */
    table.inner { width:100%; border-collapse:collapse; margin-top:0.5rem; }
    table.inner th, table.inner td {
      padding:0.5rem; border:1px solid var(--clr-surface-tonal-a20); vertical-align:top;
    }
    table.inner th { background:var(--clr-surface-a0); color:var(--clr-light-a0); font-weight:600; }

    /* alerts area */
    .alerts-toolbar {
      display:flex; justify-content:space-between; align-items:center;
      margin-top:1rem; margin-bottom:0.5rem;
    }
    .tabs {
      display:flex; gap:0.5rem;
    }
    .tabs button {
      background:var(--clr-surface-a10); color:var(--clr-light-a0); border:none;
      padding:0.4rem 0.8rem; border-radius:4px; cursor:pointer; position:relative;
    }
    .tabs button.active { background:var(--clr-primary-a0); }
    .tabs button .badge { margin-left:0.3rem; }

    .alerts-search input {
      background:var(--clr-surface-a10); border:1px solid var(--clr-surface-tonal-a20);
      color:var(--clr-light-a0); padding:0.4rem 0.8rem; border-radius:4px;
      width:200px;
    }

    .accordion-item { border-bottom:1px solid var(--clr-surface-tonal-a20); }
    .accordion-header {
      padding:0.6rem 0.8rem; display:flex; align-items:center; justify-content:space-between;
      cursor:pointer; user-select:none;
    }
    .accordion-header:hover { background:var(--clr-surface-tonal-a20); }

    .accordion-header .arrow {
      width: 0;
      height: 0;
      border-top:    6px solid transparent;
      border-bottom: 6px solid transparent;
      border-left:  6px solid var(--clr-light-a0);
      margin-right:  0.8rem;
      transition:    transform 0.2s;
    }

    .accordion-header.open .arrow {
      transform: rotate(90deg);
    }

    .accordion-content { display:none; padding:0.5rem 1.6rem 1rem; }
    .accordion-content p { margin:0.4rem 0; }

    .alert-header {
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      gap: 0.5em;
      font-weight: bold;
    }

    .alert-header .badge {
      font-weight: normal;
    }

    .badge {
      display:inline-block; background:var(--clr-primary-a0); color:var(--clr-light-a0);
      padding:0.2em 0.5em; border-radius:999px; font-size:0.8em;
      vertical-align:middle;
    }
  </style>
</head>
<body>
  <h1>üïµÔ∏è Moniots IoT Cybersecurity Report</h1>
  <div class="subtitle">{{ results|length }} devices on {{ network }} at {{ now }}</div>

  {# SUMMARY #}
  <table class="summary">
    <thead>
      <tr><th>IP</th><th>Hostname</th><th>Open Ports</th><th>Alerts</th></tr>
    </thead>
    <tbody>
      {% for entry in results %}
      {% set d = entry.device %}
      <tr data-ip="{{ d.ip }}" onclick="showDetail('{{ d.ip }}')">
        <td>{{ d.ip }}</td>
        <td>{{ d.hostname or '‚Äî' }}</td>
        <td>{{ d.open_ports|length }}</td>
        <td>{{ entry.alerts|length }}</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>

  {# DETAILS #}
  {% for entry in results %}
  {% set d = entry.device %}
  <div id="detail-{{ d.ip }}" class="detail">
    <h2>{{ d.ip }} ({{ d.hostname or 'N/A' }})</h2>
    <p><strong>Status:</strong> {{ d.status }} |
       <strong>Uptime:</strong> {{ d.uptime_seconds or 'Unknown' }} s |
       <strong>Last Boot:</strong> {{ d.last_boot or 'Unknown' }}</p>

    <div class="section-title" style="cursor:pointer;" onclick="toggleSection('os-{{ d.ip }}')">
      OS Matches <span class="badge">{{ d.os_matches|length }}</span>
    </div>
    <div id="os-{{ d.ip }}">
      {% if d.os_matches %}
      <ul>
      {% for os in d.os_matches %}
      <li>
        <strong>{{ os.name }}</strong> ({{ os.accuracy }}%)<br>
        {% for cls in os.osclasses %}
        <small>{{ cls.type }} / {{ cls.vendor }} {{ cls.osfamily }} {{ cls.osgen or '' }}</small><br>
        {% endfor %}
      </li>
      {% endfor %}
      </ul>
      {% else %}
      <p>No OS match.</p>
      {% endif %}
    </div>
    
    <div class="section-title" style="cursor:pointer;" onclick="toggleSection('ports-{{ d.ip }}')">
      Open Ports <span class="badge">{{ d.open_ports|length }}</span>
    </div>
    <div id="ports-{{ d.ip }}">
    {% if d.open_ports %}
    <table class="inner">
      <thead><tr><th>Port</th><th>State</th><th>Service</th><th>Product</th><th>Version</th><th>CPE</th></tr></thead>
      <tbody>
      {% for p in d.open_ports %}
      <tr>
        <td>{{ p.port }}</td>
        <td>{{ p.state }}</td>
        <td>{{ p.service }}</td>
        <td>{{ p.product or '‚Äî' }}</td>
        <td>{{ p.version or '‚Äî' }}</td>
        <td>{{ p.cpe or '‚Äî' }}</td>
      </tr>
      {% endfor %}
      </tbody>
    </table>
    {% else %}
      <p>No open ports.</p>
    {% endif %}
    </div>

    <div class="section-title" style="cursor:pointer;" onclick="toggleSection('alerts-{{ d.ip }}')">
      Alerts <span class="badge">{{ entry.alerts|length }}</span>
    </div>
    <div class="alerts-toolbar">
      <div class="tabs" id="tabs-{{ d.ip }}">
        {% set sev_counts = {'All': entry.alerts|length, 
                 'High': entry.alerts|selectattr('severity.value','equalto','High')|list|length,
                 'Medium': entry.alerts|selectattr('severity.value','equalto','Medium')|list|length,
                 'Low': entry.alerts|selectattr('severity.value','equalto','Low')|list|length,
                 'Informational': entry.alerts|selectattr('severity.value','equalto','Informational')|list|length } %}
        {% for sev, cnt in sev_counts.items() %}
        <button class="{{ 'active' if loop.first else '' }}" data-sev="{{ sev }}">{{ sev }}<span class="badge">{{ cnt }}</span></button>
        {% endfor %}
      </div>
      <div class="alerts-search">
        <input type="text" placeholder="Search alerts‚Ä¶" oninput="filterAlerts('{{ d.ip }}', this.value)">
      </div>
    </div>

    {# Accordion list #}
    <div id="alerts-{{ d.ip }}">
      {% for a in entry.alerts|sort(attribute='severity')|sort(attribute='alert') %}
      <div class="accordion-item" data-severity="{{ a.severity.value }}">
        <div class="accordion-header" onclick="toggleAccordion(this)">
          <div class="alert-header">
            <div class="arrow"></div>
            <div>{{ a.title }}</div>
            <span class="badge">{{ a.source.value }}</span>
            <span class="badge">{{ a.severity.value }}</span>
            <span class="badge">CWE-{{ a.cwe_id }}</span>
          </div>
        </div>
        <div class="accordion-content">
          <p>{{ a.description }}</p>

          {% if a.source == AlertSource.MONIOTS %}
            <p><strong>Service:</strong> {{ a.service.value }}</p>
            <p><strong>Username:</strong> {{ a.username }}</p>
            <p><strong>Password:</strong> {{ a.password }}</p>

          {% elif a.source == AlertSource.EXPLOITDB %}
            <p><strong>Port:</strong> {{ a.port }}</p>
            <p><strong>ExploitDB ID:</strong> {{ a.edb_id }}</p>
            <p><strong>Date:</strong> {{ a.date }}</p>
            <p><strong>Author:</strong> {{ a.author }}</p>
            <p><strong>Download:</strong>
              {% if a.file_url %}
                <a href="{{ a.file_url }}" target="_blank">{{ a.file_url }}</a>
              {% else %}
                ‚Äî
              {% endif %}
            </p>

          {% elif a.source == AlertSource.ZAP %}
            <p><strong>URL:</strong> {{ a.url }}</p>
            <p><strong>Parameter:</strong> {{ a.parameter or '‚Äî' }}</p>
            <p><strong>Method:</strong> {{ a.method or '‚Äî' }}</p>
            <p><strong>Evidence:</strong> {{ a.evidence or '‚Äî' }}</p>
          {% endif %}

          <p><strong>Remediation:</strong> {{ a.remediation or '‚Äî' }}</p>
        </div>
      </div>
      {% endfor %}
    </div>
  </div>
  {% endfor %}

  <script>
    function showDetail(ip) {
      document.querySelectorAll('.detail').forEach(d=>d.classList.remove('active'));
      document.getElementById('detail-'+ip).classList.add('active');
      window.scrollTo({ top: document.getElementById('detail-'+ip).offsetTop-20, behavior:'smooth' });
    }

    function toggleAccordion(header) {
      const arrow = header.querySelector('.arrow');
      const content = header.nextElementSibling;
      const open = header.classList.toggle('open');
      content.style.display = open ? 'block' : 'none';
    }

    /* Tab switching */
    document.querySelectorAll('[id^="tabs-"] button').forEach(btn => {
      btn.addEventListener('click', () => {
        const toolbar = btn.closest('.alerts-toolbar');
        const ip = toolbar.closest('.detail').id.replace('detail-','');
        const tabs   = toolbar.querySelector('.tabs');
        const search = toolbar.querySelector('input').value.trim().toLowerCase();

        // 1) activate the clicked tab
        tabs.querySelectorAll('button').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');

        // 2) re‚Äêfilter all the accordion items
        filterAlerts(ip, search);
      });
    });

    /* Search filtering */
    function filterAlerts(ip, text) {
      const container = document.getElementById('alerts-'+ip);
      const lc = text.toLowerCase();
      // find which severity is selected
      const tabs = document.getElementById('tabs-'+ip);
      const activeTab = tabs.querySelector('button.active').dataset.sev;

      container.querySelectorAll('.accordion-item').forEach(item => {
        const sevMatch = activeTab === 'All' || item.dataset.severity === activeTab;
        const txtMatch = item.innerText.toLowerCase().includes(lc);
        item.style.display = (sevMatch && txtMatch) ? '' : 'none';
      });
    }
    
    /* Section toggling */
    function toggleSection(id) {
      var el = document.getElementById(id);
      if (el.style.display === "none" || el.style.display === "") {
        el.style.display = "block";
      } else {
        el.style.display = "none";
      }
    }
  </script>
</body>
</html>
